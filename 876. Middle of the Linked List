Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Constraints:

The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

sol:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        // aproach slow 1
        // ListNode* temp = head;
        // int count = 0;

        // while(temp){
        //     temp = temp->next;
        //     count++;
        // }

        // count = count/2 ;

        // ListNode* middle = head;
        // while(count--){
        //     middle = middle->next;
        // }

        // return middle;

        // faster approach 2

        ListNode* firstslow = head;
        ListNode* secondFast = head;

        while(secondFast && secondFast->next){
            firstslow = firstslow->next;
            secondFast = secondFast->next->next;
        }

        return firstslow;

    }
};
