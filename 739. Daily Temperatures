Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

 

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]

Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]

Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]

 

Constraints:

    1 <= temperatures.length <= 105
    30 <= temperatures[i] <= 100

sol:
class Solution {
public:
    vector<int> dailyTemperatures(vector<int>& temperatures) {
        // aproach 1
        // vector<int> ans;
        // for(int i=0; i<temperatures.size()-1; i++){
        //     int total = 0;
        //         int  flag = 0;
        //     for(int j=i+1; j<temperatures.size(); j++){
        //         total++;
        //         if(temperatures[i] < temperatures[j]){
        //             ans.push_back(total);
        //             flag =1 ;
        //             break;
        //         }
        //     }
        //     if(!flag){
        //         ans.push_back(0);
        //     }

        // }

        // ans.push_back(0);
        // return ans;


        // aproach 2
        stack<pair<int, int>> stk;
        int n = temperatures.size();
        for(int i=n-1; i>=0; i--){
            int val = 1;
            int element = temperatures[i];
            if(stk.empty()) temperatures[i] = 0;
            else{
                while(!stk.empty() && stk.top().first <= temperatures[i]){
                    val+= stk.top().second;
                    stk.pop();
                }
                (stk.empty()) ? temperatures[i] = 0 : temperatures[i] = val;
            }  
            stk.push({element, val});
        }

        return temperatures;
        
    }
};
