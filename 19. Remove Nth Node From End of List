Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:

Input: head = [1], n = 1
Output: []

Example 3:

Input: head = [1,2], n = 1
Output: [1]

 

Constraints:

    The number of nodes in the list is sz.
    1 <= sz <= 30
    0 <= Node.val <= 100
    1 <= n <= sz

 

Follow up: Could you do this in one pass?

sol:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {

        // int totalSize = 0;
        // if(head == NULL){
        //     return head;
        // }

        // ListNode* temp = head;
        // while(temp != NULL){
        //     totalSize++;
        //     temp = temp->next;
        // }

        // totalSize = totalSize-n;
        // temp = head;
        // while(totalSize > 0){
        //     totalSize--;
        //     temp = temp->next;
        // }
        // if(temp->next->next != NULL){
        //     temp->next = temp->next->next;
        // }else{
        //     temp->next = NULL;
        // }


        // return head;


        // aproach 2
        // ListNode* back = head;
        // ListNode* front = head;

        // n = n+1;
        // for(int i=0; i<n && front != NULL; i++){
        //     front = front->next;
        // }

        // while(front != NULL){
        //     front = front->next;
        //     back = back->next;
        // }

        // back->next = back->next->next;


        // return head;



        // apraoch 3
        ListNode* front = head;
        ListNode* back = head;

        for(int i=0; i<n; i++){
            front = front->next;
        }

        if(!front){
            return head->next;
        }

        while(front->next){
            front = front->next;
            back = back->next;
        }

        back->next = back->next->next;

        return head;


    }
};
