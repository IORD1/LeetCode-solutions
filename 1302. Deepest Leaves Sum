Given the root of a binary tree, return the sum of values of its deepest leaves.
 

Example 1:


Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15
Example 2:

Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
1 <= Node.val <= 100

sol:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* node, int &count, int maxHeight , TreeNode* root){
        if(!node) return ;

        if(!node->left && !node->right && ((depth2(root,node) + 1) == maxHeight)){
            count += node->val;
        }

        solve(node->left, count,maxHeight,root);
        solve(node->right, count,maxHeight, root);
    }

    int depth(TreeNode* root, int x){
        if(!root) return -1;
        int dist = -1;
        if(root->val == x
            || (dist = (depth(root->left, x))) >= 0
            || (dist = (depth(root->right, x))) >= 0
            ){
            return dist + 1;
        }

        return dist;
        
    }

     int depth2(TreeNode* root, TreeNode* node){
        if(!root) return -1;
        int dist = -1;
        if(root == node
            || (dist = (depth2(root->left, node))) >= 0
            || (dist = (depth2(root->right, node))) >= 0
            ){
            return dist + 1;
        }

        return dist;
        
    }

    int getHeight(TreeNode* node){
        if(!node) return 0;

        int lheight = getHeight(node->left);
        int rheight = getHeight(node->right);

        return (1 + max(lheight, rheight));
    }

    int deepestLeavesSum(TreeNode* root) {
        int count = 0;
        int maxHeight = getHeight(root);
        solve(root, count,maxHeight, root);
        // cout<<getHeight(root->left->right)<<endl;

        // cout<<depth(root,7)<<endl;
        // cout<<getHeight(root->left->left->left)<<endl;
        // cout<<"max height "<<getHeight(root)<<endl;

        // cout<<depth2(root, root->left->right)<<endl;
        return count;
    }
};
