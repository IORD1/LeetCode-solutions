Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 
Given the root of a binary tree, return the leftmost value in the last row of the tree.

 

Example 1:


Input: root = [2,1,3]
Output: 1
Example 2:


Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1

sol: 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int returnHeight(TreeNode* root){
        if(!root) return 0;

        int lh = returnHeight(root->left);
        int rh = returnHeight(root->right);
        return 1+max(lh,rh);
    }


    int levelWiseTraversal(TreeNode* root,int maxHeight){
        queue<TreeNode*> q;
        int currHeight = 1;
        if(root == NULL) return 0;
        vector<int> v;
        q.push(root);
        while(!q.empty()){
            int s = q.size();
            for(int i=0; i<s;i++){
                TreeNode* temp = q.front();
                q.pop();

                if(temp->left != NULL){
                    q.push(temp->left);
                }
                if(temp->right != NULL){
                    q.push(temp->right); 
                }
                if(currHeight == maxHeight){
                    v.push_back(temp->val);
                }
            }
            currHeight++;

            
        }

        return v[0];
    }


    int findBottomLeftValue(TreeNode* root) {


        cout<<returnHeight(root)<<endl;
        // cout<<returnHeight(root->right)<<endl;
        return levelWiseTraversal(root,returnHeight(root));
    }
};
