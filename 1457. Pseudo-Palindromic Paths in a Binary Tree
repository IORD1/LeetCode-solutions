Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.

 

Example 1:



Input: root = [2,3,1,3,1,null,1]
Output: 2 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).
Example 2:



Input: root = [2,1,1,1,3,null,null,null,null,null,1]
Output: 1 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).
Example 3:

Input: root = [9]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 9

sol: APROACH 1: Space limit exceeed
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool checkPalindorom(vector<int> v){
        if(v.size() == 0){
            return true;
        }

        unordered_map<int,int> mp;
        for(int i=0; i<v.size(); i++){
            mp[v[i]]++;
        }

        int flag = 0;

        for(auto it : mp){
            if(it.second == 1 && flag == 0){
                flag = 1;
            }else if(it.second == 1 && flag == 1){
                return false;
            }else if(it.second % 2 == 1 && flag == 1){
                return false;
            }else if(it.second % 2 == 1 && flag == 0){
                flag = 1;
            }
        }

        return true;
    }

    void getToRoot(TreeNode* node, vector<int> v, int &count){
        if(node == NULL){
            return;
        }

        v.push_back(node->val);

        if(node->left == NULL && node->right == NULL){

            if(checkPalindorom(v)){
                count++;
            }
        }

        
        getToRoot(node->left,v,count);
        getToRoot(node->right,v,count);
        
    }


    int pseudoPalindromicPaths (TreeNode* root) {
        int count = 0;
        
        getToRoot(root,{},count);

        return count;
    }
};


OPTIMIZED APROACH :
class Solution {
public:
    int pseudoPalindromicPaths(TreeNode* root) {

        vector<int> digits(10, 0);
        return dfs(root, digits);
    }

private:
    int dfs(TreeNode* root, vector<int>& digits) {
        if (root == nullptr) return 0;

        digits[root->val]++;

    
        if (root->left == nullptr && root->right == nullptr) {
            int cnt = countOdd(digits);
            digits[root->val]--; 
           
            return (cnt <= 1) ? 1 : 0;
        }

        int leftCount = dfs(root->left, digits);
        int rightCount = dfs(root->right, digits);
        digits[root->val]--;

        return leftCount + rightCount;
    }

    int countOdd(const vector<int>& digits) {
        int cnt = 0;
        
        for (int i = 1; i < 10; ++i) {
            if ((digits[i]) & 1) cnt++;
        }
        return cnt;
    }
};
