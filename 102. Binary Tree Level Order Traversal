Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000

sol:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int getLevel(TreeNode* root){
        if(!root) return 0;
        int lh = getLevel(root->left);
        int rh = getLevel(root->right);

        return max(lh,rh) + 1;
    }

    int getdepth(TreeNode* root, TreeNode* node){
        if(!root) return -1;

        int dist = -1;

        if(root == node || (dist = getdepth(root->left, node)) >=0 || (dist = getdepth(root->right, node)) >= 0 ){
            return dist + 1;
        }

        return dist;
    }

    void solve(TreeNode* root,TreeNode* node, unordered_map<int,vector<int>>  &mp){
        if(!node) return;

        int level = getdepth(root, node);
        mp[level].push_back(node->val);

        solve(root, node->left, mp);
        solve(root, node->right, mp);

    }


    vector<vector<int>> levelOrder(TreeNode* root) {
        unordered_map<int, vector<int>> mp;
        vector<vector<int>> v;
        int maxheight = getLevel(root);
        solve(root,root, mp);

         for(int i=0; i <= maxheight; i++){
             for(auto it:mp){
                 if(i == it.first){
                     v.push_back(it.second);
                     break;
                 }
             }
         }


        return v;
    }
};
