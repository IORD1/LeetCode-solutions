Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:

Input: nums = [1]
Output: [[1]]

 

Constraints:

    1 <= nums.length <= 6
    -10 <= nums[i] <= 10
    All the integers of nums are unique.

sol:
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        // sort(nums.begin(), nums.end());
        // set<vector<int>> ans;
        // ans.insert(nums);
        // for(int i=0; i<nums.size()-1; i++){
        //     for(int j=i+1; j<nums.size(); j++){
        //         if(nums[j] > nums[i]){
        //             swap(nums[j],nums[i]);
        //         }
        //         ans.insert(nums);
        //         // ans.push_back(nums);

        //     }
        // }

        // for(int i=0; i<nums.size()-1; i++){
        //     for(int j=i+1; j<nums.size(); j++){
        //         if(nums[j] < nums[i]){
        //             swap(nums[j], nums[i]);
        //         }
        //         ans.insert(nums);
        //         // ans.push_back(nums);
        //     }
        // }

        // for(int i=0; i<nums.size()-2; i++){
        //     for(int j=i+2; j<nums.size(); j++){
        //         if(nums[j] < nums[i]){
        //             swap(nums[j], nums[i]);
        //         }
        //         ans.insert(nums);
        //         // ans.push_back(nums);
        //     }
        // }


        // for(int i=0; i<nums.size()-2; i++){
        //     for(int j=i+2; j<nums.size(); j++){
        //         if(nums[j] < nums[i]){
        //             swap(nums[j], nums[i]);
        //         }
        //         ans.insert(nums);
        //         // ans.push_back(nums);
        //     }
        // }

        //  for(int i=0; i<nums.size()-3; i++){
        //     for(int j=i+3; j<nums.size(); j++){
        //         if(nums[j] < nums[i]){
        //             swap(nums[j], nums[i]);
        //         }
        //         ans.insert(nums);
        //         // ans.push_back(nums);
        //     }
        // }

        // for(int i=0; i<nums.size()-3; i++){
        //     for(int j=i+3; j<nums.size(); j++){
        //         if(nums[j] < nums[i]){
        //             swap(nums[j], nums[i]);
        //         }
        //         ans.insert(nums);
        //         // ans.push_back(nums);
        //     }
        // }

        // vector<vector<int>> v;

        // for(auto &i : ans){
        //     v.push_back(i);
        // }
        // return v;


        // ------------------2--------------
        // set<vector<int>> ans;
        // ans.insert(nums);
        // for(int i=0; i<nums.size(); i++){
        //     for(int j=0; j<nums.size()-1; j++){
        //         swap(nums[j],nums[j+1]);
        //         ans.insert(nums);
        //     }
        // }
        // vector<vector<int>> v;
        // for(auto& i: ans){
        //     v.push_back(i);
        // }
        // return v;


        //----------------------3---------------

    





    }
};

with python:
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        results=permutations(nums)
        return results


        
