Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.

 

Constraints:

    3 <= nums.length <= 3000
    -105 <= nums[i] <= 105

sol:
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        // nums.sort(nums.begin(), nums.end());
        // vector<int> ans;

        // int start = 0;
        // int end = nums.size()-1;
        // while(start <= end ){
        //     vector<int> temp;
        //     temp.push_back(nums[start]);
        //     temp.push_back(nums[end]);

        //     int diff = nums[start]-nums[end];
        //     if(diff>0){
        //         start++;
        //         temp.push_back(nums[start]);
        //         temp.sort(temp.begin(), temp.end());
        //         if(accumulate(temp.begin(), temp.end(), 0) == 0){
        //             ans.push_back(temp);
        //         }


        //     }else if(diff < 0){
        //         end--;
        //         temp.push_back(nums[end]);
        //         temp.sort(temp.begin(), temp.end());
        //         if(accumulate(temp.begin(), temp.end(), 0) == 0){
        //             ans.push_back(temp);
        //         }
        //     }
            


        // }

        // time limit exceed
        // vector<vector<int>> ans;
        // set<vector<int>> s;
        // for(int i=0; i<nums.size()-2;i++){
        //     for(int j=i+1; j<nums.size()-1; j++){
        //         for(int l=j+1; l<nums.size(); l++){
        //             vector<int> temp;
        //             temp.push_back(nums[i]);
        //             temp.push_back(nums[j]);
        //             temp.push_back(nums[l]);
        //             sort(temp.begin(), temp.end());
        //             if(accumulate(temp.begin(), temp.end(),0) == 0){
        //                 s.insert(temp);
        //             }
        //         }
        //     }
        // }


        // for(auto triplets : s)
        //     ans.push_back(triplets);

        // return ans;


        // aproach 2
        sort(nums.begin(), nums.end());
        set<vector<int>> s;
        vector<vector<int>> ans;
        for (int i = 0; i < nums.size(); i++){
            int j = i + 1;
            int k = nums.size() - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum == 0) {
                    s.insert({nums[i], nums[j], nums[k]});
                    j++;
                    k--;
                } else if (sum < 0) {
                    j++;
                } else {
                    k--;
                }
            }
        }
        for(auto triplets : s)
            ans.push_back(triplets);
        return ans;

    }
};
