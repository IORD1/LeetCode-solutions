Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Example 2:

Input: strs = [""]
Output: [[""]]

Example 3:

Input: strs = ["a"]
Output: [["a"]]

 

Constraints:

    1 <= strs.length <= 104
    0 <= strs[i].length <= 100
    strs[i] consists of lowercase English letters.

sol:
class Solution {
public:
    bool ifAnagram(string s,string t){
        if(s.size() != t.size()){
            return false;
        }

        int arra[26] = {0};
        for(int i=0; i<s.size(); i++){
            arra[s[i]-'a']++;
            arra[t[i]-'a']--;
        }

        for(auto& i:arra){
            if(i != 0){
                return false;
            }
        }
        return true;
    }

    bool ifAnagram2(string s, string t){
            sort(s.begin(), s.end());
    sort(t.begin(), t.end());
    return s == t;
    }

    static bool cmp(const string lhs, const string rhs) {
   return lhs.length() < rhs.length();
}

    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        // vector<vector<string>> ans;
        // sort(strs.begin(),strs.end(),cmp);

        // while(strs.size() != 0){
        //     vector<string> temp;
        //     string checkfor = strs[0];
        //     strs.erase(strs.begin());
        //     temp.push_back(checkfor);
        //     if(checkfor.size() < strs[0].size()){
        //         continue;
        //     }else{
        //         for(int i=0; i<strs.size(); i++){
        //             if(checkfor.size() < strs[i].size()){
        //                 break;
        //             }else if(ifAnagram2(checkfor,strs[i])){
        //                 temp.push_back(strs[i]);
        //                 strs.erase(strs.begin()+i);
        //                 i--;
        //             }
        //         }
        //     }
            

        //     ans.push_back(temp);
        // }


        // return ans;
        // time limit exceeded for above case;\


        // using map where key is indivaual sorted key which 
        // stores just the other vairations of word
        // x.second is the vector<string> which stores all other variations
        unordered_map<string, vector<string>> mp;

        for(auto x: strs){
            string word = x;
            sort(word.begin(),word.end());
            mp[word].push_back(x);
        }

        vector<vector<string>> ans;
        for(auto x:mp){
            ans.push_back(x.second);
        }

        return ans;


    }
};
