Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:

i - k <= r <= i + k,
j - k <= c <= j + k, and
(r, c) is a valid position in the matrix.
 

Example 1:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[12,21,16],[27,45,33],[24,39,28]]
Example 2:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2
Output: [[45,45,45],[45,45,45],[45,45,45]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n, k <= 100
1 <= mat[i][j] <= 100

sol:

class Solution {
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
        // aproach 1 brute force
        // vector<vector<int>> ans;
        // int n = mat.size();
        // int m = mat[0].size();

        // for(int i=0; i<mat.size(); i++){
        //     vector<int> v;
        //     for(int j=0; j<mat[i].size(); j++){
        //         int sum = 0;
        //         for(int r=max(0,i-k); r< min(n,i+k+1); r++){
        //             for(int c=max(0, j-k); c<min(m, j+k+1); c++){
        //                     sum += mat[r][c];
                       
        //             }
        //         }
        //         v.push_back(sum);
        //     }
        //     ans.push_back(v);
        // }

        // return ans;



    

        // aproach 2 worse than brute force
        vector<vector<int>> ans;
        int n = mat.size();
        int m = mat[0].size();

        for(int i=0; i<n; i++){
            vector<int> v;
            for(int j=0; j<m; j++){
                int sum = 0;
                for(int r=0; r<n; r++){
                    for(int c=0; c<m; c++){
                         if((i-k <= r )&&( r <= i+k )&&( j-k <= c) && (c<= j+k) ){
                            sum += mat[r][c];
                        }
                       
                    }
                }
                v.push_back(sum);
            }
            ans.push_back(v);
        }

        return ans;
    }
};
