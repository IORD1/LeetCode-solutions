Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000

sol:

// aproach 1 : simple naive aproach using nested forloops
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        int flag = 1;

            for(int i=0; i<nums1.size(); i++){
                for(int j=0; j<nums2.size(); j++){
                    if(nums2[j] == nums1[i]){
                        for(int k=0; k<ans.size(); k++){
                            if(ans[k] == nums2[j]){
                                flag = 0;
                            }
                        }
                        if(flag){
                            ans.push_back(nums2[j]);
                        }
                    }
                    flag = 1;
                }
            }
            return ans;
    }
};


// aproach 2 : using maps 

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> mp;
        for(auto &it : nums1){
            if(!mp[it] || mp[it] < 1 ){
                mp[it]++;
            }
        }

        for(auto &it : nums2){
            if(mp[it] && mp[it] < 3 ){
                mp[it]++;
            }
        }

        vector<int> ans;
        for(auto it: mp){
            // cout<<it.first<<"-"<<it.second<<endl;
            if(it.second >= 2){
                ans.push_back(it.first);
            }
        }


        return ans;
    }
};
