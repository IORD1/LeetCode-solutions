You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

 

Constraints:

    The number of nodes in each linked list is in the range [1, 100].
    0 <= Node.val <= 9
    It is guaranteed that the list represents a number that does not have leading zeros.

sol:/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        // Node* ans = new Node(head->val);
        // ans->random = head->random;
        // Node* it = ans;
        // Node* explorer = head->next;
        // it->next = NULL;
        // while(explorer != NULL){
        //     it->next = explorer;
        //     it = it->next;
        //     it->random = explorer->random;
        //     explorer = explorer->next;
        // }
        // return ans;

        // Node* it = head;
                
        // while(it != NULL){

        // }


        if (!head) return nullptr;

        unordered_map<Node*, Node*> pointer_storage;

        Node* it = head;
        while(it){
            pointer_storage[it] = new Node(it->val);
            it = it->next;
        }

        it = head;
        while(it){
            pointer_storage[it]->next = pointer_storage[it->next];
            pointer_storage[it]->random = pointer_storage[it->random];
            it = it->next;
        }

        return pointer_storage[head];
    }
};
