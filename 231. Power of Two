Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two, if there exists an integer x such that n == 2x.

 

Example 1:

Input: n = 1
Output: true
Explanation: 20 = 1
Example 2:

Input: n = 16
Output: true
Explanation: 24 = 16
Example 3:

Input: n = 3
Output: false
 

Constraints:

-231 <= n <= 231 - 1
 

Follow up: Could you solve it without loops/recursion?

sol:
class Solution {
public:
    bool isPowerOfTwo(int n) {
    // aproach 1 : maximixing a number
    //     long x = 0;
    //     long two = 1;
    //     while(two <= n){
    //         if(two == n){
    //             return true;
    //         }
    //         x += 1;
    //         two = pow(2,x);
    //     }

    //     return false;
    // }

    // aproachh 2 : minimizing given number
    if(n== 0) return false;

    while(n%2 == 0) {
        n /= 2;
    }

    return n==1;
};
