You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].

The number of global inversions is the number of the different pairs (i, j) where:

0 <= i < j < n
nums[i] > nums[j]
The number of local inversions is the number of indices i where:

0 <= i < n - 1
nums[i] > nums[i + 1]
Return true if the number of global inversions is equal to the number of local inversions.

 

Example 1:

Input: nums = [1,0,2]
Output: true
Explanation: There is 1 global inversion and 1 local inversion.
Example 2:

Input: nums = [1,2,0]
Output: false
Explanation: There are 2 global inversions and 1 local inversion.
 

Constraints:

n == nums.length
1 <= n <= 105
0 <= nums[i] < n
All the integers of nums are unique.
nums is a permutation of all the numbers in the range [0, n - 1].

sol:

class Solution {
public:
    bool isIdealPermutation(vector<int>& nums) {
        // aproach 1 naive
        // int globalinv = 0;
        // int localinv = 0;
        // for(int i=0; i<nums.size()-1; i++){
        //     for(int j= i+1; j<nums.size(); j++ ){
        //         if(nums[i] > nums[j]){
        //             globalinv++;
        //         }
        //     }
        //     if(nums[i] > nums[i+1]){
        //         localinv++;
        //     }
        // }

        // if(globalinv == localinv){
        //     return true;
        // }
        // return false;

        // aproach 2 
        // you see, if difference between local,global is asked
        // and slight change will lead to false
        // hence it is expected to be some pattern here in which all
        // arrays with both equal lie. The pattern here you see is if
        // a num[i] deviates more than 1 from it's original location, 
        // difference becomes > 1 and will result in unequal 
        // local and global

        for(int i=0; i<nums.size(); i++){
            if(abs(nums[i] - i) > 1) return false;
        }

        return true;
    }
};
