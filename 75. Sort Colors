Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?

sol:
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int numone = 0,numtwo = 0,numzero = 0;
        for(auto &it: nums){
            if(it==0){
                numzero++;
            }else if(it==1){
                numone++;
            }else{
                numtwo++;
            }
        }

        for(int i=0; i<nums.size(); i++){
            if(numzero > 0){
                nums[i] = 0;
                numzero--;
            }else if(numone > 0){
                numone--;
                nums[i]  = 1;
            }else if(numtwo > 0){
                numtwo--;
                nums[i] = 2;
            }
        }

        // for(int i=0; i<nums.size(); i++){
        //     if(numzero--){
        //         nums[i] = 0;
        //         continue;
        //     }else if(numone--){
        //         nums[i]  = 1;
        //         continue;
        //     }else if(numtwo--){
        //         nums[i] = 2;
        //     }
        // }



    }
};

