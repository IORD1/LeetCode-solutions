Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3

Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

 

Constraints:

    n == nums.length
    1 <= n <= 5 * 104
    -109 <= nums[i] <= 109

 
Follow-up: Could you solve the problem in linear time and in O(1) space?

sol:
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        float size = nums.size();
        float limit = size/2;
        cout<<(limit);
        int majority = 0;
        vector<int> count(10000,0);
        vector<int> negcount(10000,0);

        for(int i=0; i<nums.size(); i++){
            if(nums[i] < 0){
                negcount[-nums[i]] = negcount[-nums[i]] + 1;
            }else{
                count[nums[i]] = count[nums[i]] + 1;
            }
        }

        for(int i=0; i<count.size() ; i++){
            if(count[i] >= limit){
                return i;
            }
        }
        for(int i=0; i<negcount.size() ; i++){
            if(negcount[i] >= limit){
                return -(i+1);
            }
        }
    
        return majority;
    }
};
