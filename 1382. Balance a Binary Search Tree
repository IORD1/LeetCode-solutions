Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.

A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.

 

Example 1:


Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2] is also correct.
Example 2:


Input: root = [2,1,3]
Output: [2,1,3]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
1 <= Node.val <= 105

sol:


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, node:TreeNode, v:list):
        if(node == None):
            return
        
        self.inorderTraversal(node.left,v)
        v.append(node.val)
        self.inorderTraversal(node.right,v)

    def buildTree(self, v:list, left : int, right : int) -> TreeNode:
        if(left > right):
            return None

        mid = left + (right-left)//2

        node = TreeNode(v[mid])
        node.left = self.buildTree(v,left,mid-1)
        node.right = self.buildTree(v,mid+1, right)

        return node

    def balanceBST(self, root: TreeNode) -> TreeNode:
        v = []
        self.inorderTraversal(root,v)

        for i in range(0,len(v)):
            print(v[i],end='-')
        

        return self.buildTree(v,0,len(v)-1)
        
