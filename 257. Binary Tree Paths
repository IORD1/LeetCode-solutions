Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100


sol:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> col;
    vector<string> ans;

    void formans(){
        for(int i=0; i<col.size(); i++){
            string arrow = "";
            for(int j=0; j<col[i].size(); j++){
                arrow += to_string(col[i][j]);
                if(j != col[i].size()-1){
                    arrow += "->";
                }
            }
            ans.push_back(arrow);
        }
    }

    void gotoRoot(TreeNode* node, vector<int> v){
        if(!node) return;

        v.push_back(node->val);
        if(!node->left && !node->right){
            col.push_back(v);
        }

        gotoRoot(node->left, v);
        gotoRoot(node->right,v);
    }


    vector<string> binaryTreePaths(TreeNode* root) {
        gotoRoot(root,{});
        formans();
        return ans;
    }
};
