Given a positive integer n, find the pivot integer x such that:

The sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively.
Return the pivot integer x. If no such integer exists, return -1. It is guaranteed that there will be at most one pivot index for the given input.

 

Example 1:

Input: n = 8
Output: 6
Explanation: 6 is the pivot integer since: 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21.
Example 2:

Input: n = 1
Output: 1
Explanation: 1 is the pivot integer since: 1 = 1.
Example 3:

Input: n = 4
Output: -1
Explanation: It can be proved that no such integer exist.
 

Constraints:

1 <= n <= 1000

sol:

class Solution {
public:
    int pivotInteger(int n) {
        // aproach 1 naive
        // vector<int> v;
        // for(int i=1; i<=n; i++){
        //     v.push_back(i);
        // }
        // int start = 0;
        // int end = v.size()-1;
        // int sumstart = 0;
        // int sumend = 0;
        // sumstart = v[start];
        // sumend = v[end];
        // while(start <= end){
        //     if(sumstart == sumend && start == end){
        //         return start+1;
        //     }else if(sumstart < sumend){
        //         start++;
        //         sumstart += v[start];
        //     }else{
        //         end--;
        //         sumend += v[end];
        //     }
        // }

        // return -1;


        // aproach 2 faster
        double sum = sqrt(n * (n+1)/2.0);

        if(fmod(sum,1.0) != 0){
            return -1;
        }else{
            return static_cast<int>(sum);
        }
    }
};
