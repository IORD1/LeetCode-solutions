Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

 

Example 1:


Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.
Example 2:


Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23
Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.
 

Constraints:

The number of nodes in the tree is in the range [1, 2 * 104].
1 <= Node.val <= 105
1 <= low <= high <= 105
All Node.val are unique.


sol:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void giveit(TreeNode* root,vector<int> &v){
        if(root == NULL){
            return;
        }

        v.push_back(root->val);
        giveit(root->left, v);
        giveit(root->right, v);

    }


    void sumIt(TreeNode* root, int &sum, int high, int low){
        if(root == NULL){
            return;
        }

        if(root->val <= high && root->val >= low){
            sum += root->val;
        }

        sumIt(root->left, sum, high , low);
        sumIt(root->right, sum, high, low);
    }


    int rangeSumBST(TreeNode* root, int low, int high) {
        vector<int> v;
        int sum = 0;

        giveit(root,v);

        // aproach 1
        // sort(v.begin(), v.end());

        // for(int i=0; i<v.size(); i++){
        //     if(v[i] == low){
        //         for(int k=i; k<v.size(); k++){
        //             if(v[k] <= high){
        //                 sum += v[k];
        //             }
        //         }
        //         break;
        //     }
        // }

        // aproach 2

        // for(int i=0; i<v.size(); i++){
        //     if(v[i] >= low && v[i] <= high){
        //         sum += v[i];
        //     }
        // }

        //aproach 3

        sumIt(root, sum,high, low);


        return sum;
    }
};
