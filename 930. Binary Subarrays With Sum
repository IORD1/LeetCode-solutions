Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

Constraints:

1 <= nums.length <= 3 * 104
nums[i] is either 0 or 1.
0 <= goal <= nums.length

sol: 

class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        // int n = nums.size();
        // int ans = 0;
        // for(int i=0; i<n; i++){
        //     int appendsum = nums[i];
        //     if(appendsum == goal) ans++;
        //     for(int j=i+1; j<n; j++){
        //         appendsum += nums[j];
        //         if( appendsum == goal){
        //             ans++;
        //         }
        //     }
        // }

        // return ans;

        // aproach 2 using prefix sum hashmap

        unordered_map<int,int> mp;
        int sum  = 0;
        int ans = 0;

        for(auto i : nums){
            sum += i;
            if(sum == goal) ans++;

            if(mp.find(sum-goal) != mp.end()){
                ans+=mp[sum-goal];
            }

            mp[sum]++;
        }

        return ans;

    }
};
