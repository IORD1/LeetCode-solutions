Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.
Example 2:

Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.
Example 3:

Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.
 

Constraints:

1 <= nums.length <= 5 * 105
-231 <= nums[i] <= 231 - 1
 

Follow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?

sol:


class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        // aproach 1 using pointer does not run on all test cases
//         if(nums.size() <3) return false;

//         int i=0,j=1,k=2;

//         for(i=0; i<nums.size()-2 ; i++){
//             j=i+1;
//             k=i+2;
//             while(i < j && j< k && k < nums.size() ){
//                 if(nums[i] < nums[j] && nums[j] < nums[k]){
//                     return true;
//                 }else{
//                     if(nums[i] < nums[j] && nums[j] >= nums[k]){
//                         if(k == nums.size()-1){
//                             j++;
//                         }else{
//                             k++;
//                         }
//                     }else if(nums[i] >= nums[j]){
//                         j++;
//                         k++;
//                     }
//                 }
//             }

//         }

//         return false;

        // aproach 2 - using pointers and storing greatest and smallest values

        int mini = INT_MAX;
        int maxa = INT_MAX;

        for(int i=0; i<nums.size(); i++){
            if(nums[i] < mini){
                mini = nums[i];
            }

            if(nums[i] > mini && nums[i] < maxa){
                maxa = nums[i];
            }

            if(nums[i] > maxa){
                return true;
            }
        }

        return false;

    }
};
