Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
Example 2:

Input: root = [0,null,1]
Output: [1,null,1]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
0 <= Node.val <= 100
All the values in the tree are unique.
 

Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/

sol:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root, vector<int> &v){
        if(!root) return;

        

        solve(root->left,v);

        int last_index = v.size()-1;
        if(last_index > 0){
            v.push_back(v[last_index] + root->val);
        }else{
            v.push_back(root->val);
        }
        solve(root->right,v);
    }


    void changeGiven(TreeNode* root, int val, int changewith){
        if(!root) return;

        if(root->val == val){
            root->val = changewith;
            return;
        }

        changeGiven(root->left,val, changewith);
        changeGiven(root->right,val,changewith);
    }


    void haveAll(TreeNode* node,vector<int> &v){
        if(!node) return;

        v.push_back(node->val);
        haveAll(node->left,v);
        haveAll(node->right,v);
    }

    TreeNode* bstToGst(TreeNode* root) {
        vector<int> v;
        haveAll(root,v);

        for(auto &i: v){
            cout<<i<<"-";
        }

        sort(v.begin(),v.end());
        int total = 0;
        for(auto &it : v){
            total += it;
        }

        cout<<total<<endl;


        for(int i=0; i<v.size(); i++){
            changeGiven(root,v[i], total);
            total = total-v[i];
        }

        return root;
    }
};
