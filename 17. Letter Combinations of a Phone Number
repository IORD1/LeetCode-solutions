Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].
sol:
class Solution {
public:

    void tree(int index, string &digits, vector<string> &ans, string &s, map<char, string> &st){
        if(index == digits.size()){
            ans.push_back(s);
            return;
        }

        string t = st[digits[index]];
        for(int i=0; i<t.size(); i++){
            s += t[i];
            tree(index+1, digits, ans, s, st);
            s.pop_back();
        }
    }


    vector<string> letterCombinations(string digits) {
        vector<string> ans;
        if(digits.size() == 0) return ans;
        map<char, string> st;
        st['2'] = "abc";
        st['3'] = "def";
        st['4'] = "ghi";
        st['5'] = "jkl";
        st['6'] = "mno";
        st['7'] = "pqrs";
        st['8'] = "tuv";
        st['9'] = "wxyz";

        string s;

        tree(0, digits, ans, s, st);

        return ans;

    }
};
