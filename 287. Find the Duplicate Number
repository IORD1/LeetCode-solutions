Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2

Example 2:

Input: nums = [3,1,3,4,2]
Output: 3

 

Constraints:

    1 <= n <= 105
    nums.length == n + 1
    1 <= nums[i] <= n
    All the integers in nums appear only once except for precisely one integer which appears two or more times.

 

Follow up:

    How can we prove that at least one duplicate number must exist in nums?
    Can you solve the problem in linear runtime complexity?

sol:
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
    // aproach 1 using unordere map
    //    unordered_map<int, int> mp;
    //    for(int i=0; i<nums.size(); i++){

    //        mp[nums[i]]++;
    //         if(mp[nums[i]] > 1){
    //             return nums[i];
    //         }
    //    }
    //     return 0;

    // aproach 2 using vector
    // vector<int> track(nums.size(), 0);
    // for(int i=0; i<nums.size(); i++){
    //     track[nums[i]-1]++;
    //     if(track[nums[i]-1] > 1){
    //         return nums[i];
    //     }
    // }

    // return 0;


    // aproach 3 brute force sorting
    // sort(nums.begin(), nums.end());
    // for(int i=0; i<nums.size()-1; i++){
    //     if(nums[i+1] == nums[i]){
    //         return nums[i];
    //     }
    // }
    // return 0;


    // aproach 4 ll concept tortoise hair method
    int fast = nums[0];
    int slow = nums[0];
    do{
        fast = nums[nums[fast]];
        slow = nums[slow];
    }while(fast != slow);

    fast = nums[0];
    while(slow != fast){
        slow = nums[slow];
        fast = nums[fast];
    }
    return slow;

    }
};
