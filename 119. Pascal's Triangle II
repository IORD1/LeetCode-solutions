Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

 

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]

Example 2:

Input: rowIndex = 0
Output: [1]

Example 3:

Input: rowIndex = 1
Output: [1,1]

 

Constraints:

    0 <= rowIndex <= 33

 

Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?

sol:
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        int numRows = rowIndex+1;
         vector<vector<int>> vect;
            vector<int> ans;
            ans.push_back(1);
            vect.push_back(ans);
            if(numRows == 1){
                return ans;
            }
            ans.push_back(1);
            vect.push_back(ans);
            if(numRows == 2){
                return ans;
            }
            for(int i=2; i<numRows; i++){
                ans.clear();
                ans.push_back(1);
                
                for(int j=0; j<vect[i-1].size()-1;j++){
                    
                        ans.push_back(vect[i-1][j] + vect[i-1][j+1]);
                    
                }
                ans.push_back(1);

                vect.push_back(ans);
            }
            
            return ans;
    }
};
