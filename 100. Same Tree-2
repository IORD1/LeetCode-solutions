Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

 

Example 1:


Input: p = [1,2,3], q = [1,2,3]
Output: true
Example 2:


Input: p = [1,2], q = [1,null,2]
Output: false
Example 3:


Input: p = [1,2,1], q = [1,1,2]
Output: false
 

Constraints:

The number of nodes in both trees is in the range [0, 100].
-104 <= Node.val <= 104

sol:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void join(TreeNode* node, vector<int> &list){
        if(node == NULL){
            list.push_back(-1);
            return;
        }

        join(node->left, list);
        join(node->right, list);
        list.push_back(node->val);
    }


    bool checkNodes(TreeNode* root1, TreeNode* root2){
        if(!root1 && !root2){
            return true;
        }

        if(!root1 || !root2){
            return false;
        }


        if(root1->val != root2->val){
            return false;
        }

        return checkNodes(root1->left, root2->left) && checkNodes(root1->right, root2->right);


    }


    

    bool isSameTree(TreeNode* p, TreeNode* q) {
        // vector<int> v1;
        // vector<int> v2;
        // join(p,v1);
        // join(q,v2);
        // if(v1 == v2){
        //     return true;
        // }

        // return false;

        return checkNodes(p,q);
    }
};
